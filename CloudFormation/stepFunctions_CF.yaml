AWSTemplateFormatVersion: 2010-09-09
Description: Lendi cloudformation for lambda and step functions(state machine)

Resources:
  # IAM role for Lambda
  LambdaExecutionRole:
    Type: "AWS::IAM::Role"
    Properties:
      AssumeRolePolicyDocument:
        Version: "2012-10-17"
        Statement:
          - Effect: Allow
            Principal:
              Service: lambda.amazonaws.com
            Action: "sts:AssumeRole"

  # Lambda function resource
  MyLambdaFunction1:
    Type: "AWS::Lambda::Function"
    Properties:
      Handler: "index.handler"
      Role: !GetAtt [ LambdaExecutionRole, Arn ]
      Code:
        ZipFile: |
          exports.handler = (event, context, callback) => {
              callback(null, "Hello World! from lambda 1");
          };
      Runtime: "nodejs4.3"
      Timeout: "25"

  MyLambdaFunction2:
    Type: "AWS::Lambda::Function"
    Properties:
      Handler: "index.handler"
      Role: !GetAtt [ LambdaExecutionRole, Arn ]
      Code:
        ZipFile: |
          exports.handler = (event, context, callback) => {
              var input = event.input
              callback(null, input + " Hello World! from lambda 2");
          };
      Runtime: "nodejs4.3"
      Timeout: "25"
 ##################################################################
  # IAM role for state machine execution.
  StatesExecutionRole:
    Type: "AWS::IAM::Role"
    Properties:
      AssumeRolePolicyDocument:
        Version: "2012-10-17"
        Statement:
          - Effect: "Allow"
            Principal:
              Service:
                - !Sub states.${AWS::Region}.amazonaws.com
            Action: "sts:AssumeRole"
      Path: "/"
      Policies:
        - PolicyName: StatesExecutionPolicy
          PolicyDocument:
            Version: "2012-10-17"
            Statement:
              - Effect: Allow
                Action:
                  - "lambda:InvokeFunction"
                Resource: "*"     

# code for state machine 
  MyStateMachine:
    Type: "AWS::StepFunctions::StateMachine"
    Properties:
      DefinitionString:
        !Sub
          - |-
            {
              "Comment": "A Hello World AWL example using an AWS Lambda function",
              "StartAt": "HelloWorld1",
              "States": {
                "HelloWorld1": {
                  "Type": "Task",
                  "Resource": "${lambdaArn1}",
                  "Next": "HelloWorld2"
                },
                "HelloWorld2": {
                  "Type": "Task",
                  "Resource": "${lambdaArn2}",
                  "End": true                  
                }
              }
            }
          - {lambdaArn1: !GetAtt  MyLambdaFunction1.Arn }
          - {lambdaArn2: !GetAtt  MyLambdaFunction2.Arn }
      RoleArn: !GetAtt StatesExecutionRole.Arn 






# AWS::ApiGateway::Account
# specifies the AWS Identity and Access Management (IAM) role that Amazon API Gateway (API Gateway) uses to write API logs to Amazon CloudWatch Logs (CloudWatch Logs).

# AWS::ApiGateway::ApiKey
# creates a unique key that you can distribute to clients who are executing Amazon API Gateway (API Gateway) Method resources that require an API key. 

# AWS::ApiGateway::Authorizer
# creates an authorization layer that Amazon API Gateway (API Gateway) activates for methods that have authorization enabled. 

# AWS::ApiGateway::BasePathMapping
# creates a base path that clients who call your Amazon API Gateway API must use in the invocation URL.

# AWS::ApiGateway::ClientCertificate
# creates a client certificate that Amazon API Gateway (API Gateway) uses to configure client-side SSL authentication for sending requests to the integration endpoint.

# AWS::ApiGateway::Deployment
#  deploys an Amazon API Gateway (API Gateway) RestApi resource to a stage so that clients can call the API over the Internet. The stage acts as an environment.

# AWS::ApiGateway::DocumentationPart
# creates a documentation part for an Amazon API Gateway API entity. 

# AWS::ApiGateway::DocumentationVersion
# creates a snapshot of the documentation for an Amazon API Gateway API entity. 

# AWS::ApiGateway::DomainName
# specifies a custom domain name for your API in Amazon API Gateway (API Gateway).

# AWS::ApiGateway::GatewayResponse
# creates a custom response for your API Gateway API. 

# AWS::ApiGateway::Method
# creates Amazon API Gateway (API Gateway) methods that define the parameters and body that clients must send in their requests.

# AWS::ApiGateway::Model
# defines the structure of a request or response payload for an Amazon API Gateway (API Gateway) method.

# AWS::ApiGateway::RequestValidator
# sets up basic validation rules for incoming requests to your API Gateway API.

# AWS::ApiGateway::Resource
# creates a resource in an Amazon API Gateway (API Gateway) API.

# AWS::ApiGateway::RestApi
# contains a collection of Amazon API Gateway resources and methods that can be invoked through HTTPS endpoints.

# AWS::ApiGateway::Stage
# creates a stage for an Amazon API Gateway (API Gateway) deployment.

# AWS::ApiGateway::UsagePlan
# specifies a usage plan for deployed Amazon API Gateway (API Gateway) APIs.

# AWS::ApiGateway::UsagePlanKey
# associates an Amazon API Gateway API key with an API Gateway usage plan

# AWS::ApiGateway::VpcLink
# specifies an API Gateway VPC link for a AWS::ApiGateway::RestApi to access resources in an Amazon Virtual Private Cloud (VPC)

